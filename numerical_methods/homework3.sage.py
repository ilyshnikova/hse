
# This file was *autogenerated* from the file homework3.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_6 = Integer(6); _sage_const_4 = Integer(4); _sage_const_0p03 = RealNumber('0.03'); _sage_const_20 = Integer(20); _sage_const_0p01 = RealNumber('0.01')
from sage.symbolic.integration.integral import definite_integral
from sage.gsl.integration import numerical_integral

class DiffEq(object):
	def __init__(self, fx, fy, start_t, end_t, step_t, x0, y0):
		self.fx = fx
		self.fy = fy
		self.start_t = start_t
		self.end_t = end_t
		self.step_t = step_t
		self.x0 = x0
		self.y0 = y0

	def build_solution(self):
		x = []
		y = []
		cur_t = self.start_t
		prev_x = self.x0
		prev_y = self.y0
		prev_t = cur_t
		while cur_t < self.end_t:
			cur_x = prev_x + (cur_t - prev_t) * self.fx(x = prev_x, y = prev_y, t = prev_t)
			cur_y = prev_y + (cur_t - prev_t) * self.fy(x = prev_x, y = prev_y, t = prev_t)
			x.append((cur_t, cur_x))
			y.append((cur_t, cur_y))
			prev_x = cur_x
			prev_y = cur_y
			prev_t = cur_t

			cur_t += self.step_t
		self.x = x
		self.y = y

t = var('t')
x = var('x')
y = var('y')

rho = _sage_const_6 *t*(_sage_const_1  - t)
S = _sage_const_3 *t + sin(_sage_const_3 *t)
z = _sage_const_4 *t + cos(t)
x0 = _sage_const_0 
y0 = _sage_const_0 
T = _sage_const_1 
step = _sage_const_0p01 
beta = _sage_const_0p03 
f_beta = beta * (S - x)

diff_eq = DiffEq(
	diff(z, t) * definite_integral(rho, t, y, _sage_const_1 ),
	f_beta,
	_sage_const_0 ,
	T,
	_sage_const_0p01 ,
	x0,
	y0
)

diff_eq.build_solution()

#print diff_eq.x
#print diff_eq.y

g = Graphics()
g += list_plot(diff_eq.x, plotjoined=True, legend_label="x")
g.show()


g = Graphics()
g += list_plot(((S(t), x) for (t, x) in diff_eq.x), plotjoined=True, legend_label="x(s)")
g.show()

g = Graphics()
g += list_plot(diff_eq.y, plotjoined=True, legend_label="y")
g.show()

g = Graphics()
g += plot(S, (t, _sage_const_0 , T), legend_label="S")
g.show()

class ListToFunc(object):
	def __init__(self, some_list):
		self.some_dict = {}
		for (x_, y_) in  some_list:
			self.some_dict[floor(x_ / step) * step] = y_

	def get_value(self, x):
		new_value = floor(x / step) * step
		if new_value == T:
			new_value -= step
		return self.some_dict[new_value]

c2 = float(abs(ListToFunc(diff_eq.x).get_value(T) - S(T)) / S(T))
print("c2", c2)

x_func = ListToFunc(diff_eq.x)
y_func = ListToFunc(diff_eq.y)

def get_c2_subintegral(arg):
	return float(definite_integral(t * rho(t), t, y, _sage_const_1 )(t = arg)(y = y_func.get_value(arg)) * (x_func.get_value(arg + step) - x_func.get_value(arg)) / step)

c1 = (
	_sage_const_1 
	- numerical_integral(get_c2_subintegral, _sage_const_0 , T, rule=_sage_const_1 , max_points=_sage_const_20 )[_sage_const_0 ] / (x_func.get_value(T) - x0)
)
print("c1", c1)

